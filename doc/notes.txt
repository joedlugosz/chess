
 STACKS
 ======

 In the position tables shown here, zero is bottom left.  When declaring an 
 array in code, position zero is top left so the tables will appear mirrored 
 in the horizontal axis.

 The A-Stack is numbered along ranks then files, starting from the bottom left
 square as viewed by white.

 The B-Stack is numbered along files then ranks, starting from the bottom left
 square as viewed by white. The mapping from A->B is reversible.

     56 57 58 59 60 61 62 63      07 15 23 31 39 47 55 63
     48                   55      06                   62
     40                   47      05                   61
     32      A-STACK      39  ->  04      B-STACK      60
     24                   31  ->  03                   59
     16                   23      02                   58
  ^  08                   15      01                   57
  r  00 01 02 03 04 05 06 07      00 08 16 24 32 40 48 56

     f >

	 A = f + r * 8                B = r + f * 8
	 f = A % 8                      = (A / 8) + (A % 8) * 8
	 r = A / 8
 
   The C-Stack is numbered diagonally starting at the left.
   It is stored a constant table.

     56 57 58 59 60 61 62 63      28 36 43 49 54 58 61 63
     48                   55      21                   62
     40                   47      15                   60
     32      A-STACK      39  ->  10      C-STACK      57
     24                   31  ->  06                   53
     16                   23      03 07                48
  ^  08                   15      01 04 08             42
  r  00 01 02 03 04 05 06 07      00 02 05 09 14 20 27 35

     f >

   The D-Stack is numbered diagonally starting at the right.
   It is a reflection of the C-Stack in the r-axis and is 
   calculated at run-time.chess symols unicode

     56 57 58 59 60 61 62 63      
     48                   55                          
     40                   47                         
     32      A-STACK      39  ->         D-STACK      
     24                   31  ->                       06
     16                   23                        07 03
  ^  08                   15      42             08 04 01
  r  00 01 02 03 04 05 06 07      35 27 20 14 09 05 02 00

     f >


 SLIDE MOVES TABLE
 =================

 For each position of a moving piece within a rank, and each occupancy of other
 pieces in the rank, there exists a set of squares that the piece can slide to 
 without being blocked by other pieces.  All possible combinations of position 
 and occupancy are calculated at init and stored in an [8][256] table.

 Example:
		 position of moving piece:  ....*...
		 occupancy of the rank: 	X.X.*..X
		 set of possible moves:		..******

 Each set includes the nearest pieces of both sides, to enable taking of all 
 pieces.  Players are prevented from taking their own pieces in the program, 
 when the side being played is known.  

 Find the set of all squares to the left of pos that are blocked by
 other pieces.  The first piece that can be seen blocks any move past
 it, but is not counted in the set, to allow taking. */

 Example:
		 pos  ....*...
		 rank X.X.*..X
		 1.   XXXX....
		 2.   X.X.....
		 3.   ..X.....
		 4.   XX......
	
